# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mitm_hub_pb2 as mitm__hub__pb2


class MitmProxyHubServerStub(object):
    """MitmProxyHubServer负责启动mitmproxy和通知回调client端
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.start = channel.unary_unary(
                '/mitm.MitmProxyHubServer/start',
                request_serializer=mitm__hub__pb2.MitmproxyStartRequest.SerializeToString,
                response_deserializer=mitm__hub__pb2.MitmproxyStartResponse.FromString,
                )
        self.stop = channel.unary_unary(
                '/mitm.MitmProxyHubServer/stop',
                request_serializer=mitm__hub__pb2.MitmproxyStopRequest.SerializeToString,
                response_deserializer=mitm__hub__pb2.VoidResponse.FromString,
                )


class MitmProxyHubServerServicer(object):
    """MitmProxyHubServer负责启动mitmproxy和通知回调client端
    """

    def start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MitmProxyHubServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'start': grpc.unary_unary_rpc_method_handler(
                    servicer.start,
                    request_deserializer=mitm__hub__pb2.MitmproxyStartRequest.FromString,
                    response_serializer=mitm__hub__pb2.MitmproxyStartResponse.SerializeToString,
            ),
            'stop': grpc.unary_unary_rpc_method_handler(
                    servicer.stop,
                    request_deserializer=mitm__hub__pb2.MitmproxyStopRequest.FromString,
                    response_serializer=mitm__hub__pb2.VoidResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mitm.MitmProxyHubServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MitmProxyHubServer(object):
    """MitmProxyHubServer负责启动mitmproxy和通知回调client端
    """

    @staticmethod
    def start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mitm.MitmProxyHubServer/start',
            mitm__hub__pb2.MitmproxyStartRequest.SerializeToString,
            mitm__hub__pb2.MitmproxyStartResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mitm.MitmProxyHubServer/stop',
            mitm__hub__pb2.MitmproxyStopRequest.SerializeToString,
            mitm__hub__pb2.VoidResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MitmProxyHubClientServerStub(object):
    """java客户端server实现，它接收mitmproxy流量的回调，修改并返回给python端
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.onMitmRequest = channel.unary_unary(
                '/mitm.MitmProxyHubClientServer/onMitmRequest',
                request_serializer=mitm__hub__pb2.MitmRequest.SerializeToString,
                response_deserializer=mitm__hub__pb2.MitmRequest.FromString,
                )
        self.onMitmResponse = channel.unary_unary(
                '/mitm.MitmProxyHubClientServer/onMitmResponse',
                request_serializer=mitm__hub__pb2.MitmResponse.SerializeToString,
                response_deserializer=mitm__hub__pb2.MitmResponse.FromString,
                )


class MitmProxyHubClientServerServicer(object):
    """java客户端server实现，它接收mitmproxy流量的回调，修改并返回给python端
    """

    def onMitmRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def onMitmResponse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MitmProxyHubClientServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'onMitmRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.onMitmRequest,
                    request_deserializer=mitm__hub__pb2.MitmRequest.FromString,
                    response_serializer=mitm__hub__pb2.MitmRequest.SerializeToString,
            ),
            'onMitmResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.onMitmResponse,
                    request_deserializer=mitm__hub__pb2.MitmResponse.FromString,
                    response_serializer=mitm__hub__pb2.MitmResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mitm.MitmProxyHubClientServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MitmProxyHubClientServer(object):
    """java客户端server实现，它接收mitmproxy流量的回调，修改并返回给python端
    """

    @staticmethod
    def onMitmRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mitm.MitmProxyHubClientServer/onMitmRequest',
            mitm__hub__pb2.MitmRequest.SerializeToString,
            mitm__hub__pb2.MitmRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def onMitmResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mitm.MitmProxyHubClientServer/onMitmResponse',
            mitm__hub__pb2.MitmResponse.SerializeToString,
            mitm__hub__pb2.MitmResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
